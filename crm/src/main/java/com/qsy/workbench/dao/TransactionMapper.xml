<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qsy.workbench.dao.TransactionMapper">
  <resultMap id="BaseResultMap" type="com.qsy.workbench.pojo.Transaction">
    <id column="id" jdbcType="CHAR" property="id" />
    <result column="owner" jdbcType="CHAR" property="owner" />
    <result column="money" jdbcType="VARCHAR" property="money" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="expected_date" jdbcType="CHAR" property="expectedDate" />
    <result column="customer_id" jdbcType="CHAR" property="customerId" />
    <result column="stage" jdbcType="VARCHAR" property="stage" />
    <result column="type" jdbcType="VARCHAR" property="type" />
    <result column="source" jdbcType="VARCHAR" property="source" />
    <result column="activity_id" jdbcType="CHAR" property="activityId" />
    <result column="contact_id" jdbcType="CHAR" property="contactId" />
    <result column="create_by" jdbcType="VARCHAR" property="createBy" />
    <result column="create_time" jdbcType="CHAR" property="createTime" />
    <result column="edit_by" jdbcType="VARCHAR" property="editBy" />
    <result column="edit_time" jdbcType="CHAR" property="editTime" />
    <result column="description" jdbcType="VARCHAR" property="description" />
    <result column="contact_summary" jdbcType="VARCHAR" property="contactSummary" />
    <result column="next_contact_time" jdbcType="CHAR" property="nextContactTime" />
    <result column="order_no" jdbcType="VARCHAR" property="orderNo"/>
    <result column="activity_name" jdbcType="VARCHAR" property="activityName"/>
    <result column="fullname" jdbcType="VARCHAR" property="contactName"/>

  </resultMap>
  <sql id="Base_Column_List">
    id, owner, money, name, expected_date, customer_id, stage, type, source, activity_id, 
    contact_id, create_by, create_time, edit_by, edit_time, description, contact_summary, 
    next_contact_time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from tbl_tran
    where id = #{id,jdbcType=CHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from tbl_tran
    where id = #{id,jdbcType=CHAR}
  </delete>
  <insert id="insert" parameterType="com.qsy.workbench.pojo.Transaction">
    insert into tbl_tran (id, owner, money, name, 
      expected_date, customer_id, stage, 
      type, source, activity_id, 
      contact_id, create_by, create_time, 
      edit_by, edit_time, description, 
      contact_summary, next_contact_time)
    values (#{id,jdbcType=CHAR}, #{owner,jdbcType=CHAR}, #{money,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, 
      #{expectedDate,jdbcType=CHAR}, #{customerId,jdbcType=CHAR}, #{stage,jdbcType=VARCHAR}, 
      #{type,jdbcType=VARCHAR}, #{source,jdbcType=VARCHAR}, #{activityId,jdbcType=CHAR}, 
      #{contactId,jdbcType=CHAR}, #{createBy,jdbcType=VARCHAR}, #{createTime,jdbcType=CHAR}, 
      #{editBy,jdbcType=VARCHAR}, #{editTime,jdbcType=CHAR}, #{description,jdbcType=VARCHAR}, 
      #{contactummary,jdbcType=VARCHAR}, #{nextContactTime,jdbcType=CHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.qsy.workbench.pojo.Transaction">
    insert into tbl_tran
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="owner != null">
        owner,
      </if>
      <if test="money != null">
        money,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="expectedDate != null">
        expected_date,
      </if>
      <if test="customerId != null">
        customer_id,
      </if>
      <if test="stage != null">
        stage,
      </if>
      <if test="type != null">
        type,
      </if>
      <if test="source != null">
        source,
      </if>
      <if test="activityId != null">
        activity_id,
      </if>
      <if test="contactId != null">
        contact_id,
      </if>
      <if test="createBy != null">
        create_by,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="editBy != null">
        edit_by,
      </if>
      <if test="editTime != null">
        edit_time,
      </if>
      <if test="description != null">
        description,
      </if>
      <if test="contactummary != null">
        contact_summary,
      </if>
      <if test="nextContactTime != null">
        next_contact_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=CHAR},
      </if>
      <if test="owner != null">
        #{owner,jdbcType=CHAR},
      </if>
      <if test="money != null">
        #{money,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="expectedDate != null">
        #{expectedDate,jdbcType=CHAR},
      </if>
      <if test="customerId != null">
        #{customerId,jdbcType=CHAR},
      </if>
      <if test="stage != null">
        #{stage,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        #{type,jdbcType=VARCHAR},
      </if>
      <if test="source != null">
        #{source,jdbcType=VARCHAR},
      </if>
      <if test="activityId != null">
        #{activityId,jdbcType=CHAR},
      </if>
      <if test="contactId != null">
        #{contactId,jdbcType=CHAR},
      </if>
      <if test="createBy != null">
        #{createBy,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=CHAR},
      </if>
      <if test="editBy != null">
        #{editBy,jdbcType=VARCHAR},
      </if>
      <if test="editTime != null">
        #{editTime,jdbcType=CHAR},
      </if>
      <if test="description != null">
        #{description,jdbcType=VARCHAR},
      </if>
      <if test="contactummary != null">
        #{contactummary,jdbcType=VARCHAR},
      </if>
      <if test="nextContactTime != null">
        #{nextContactTime,jdbcType=CHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.qsy.workbench.pojo.Transaction">
    update tbl_tran
    <set>
      <if test="owner != null">
        owner = #{owner,jdbcType=CHAR},
      </if>
      <if test="money != null">
        money = #{money,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="expectedDate != null">
        expected_date = #{expectedDate,jdbcType=CHAR},
      </if>
      <if test="customerId != null">
        customer_id = #{customerId,jdbcType=CHAR},
      </if>
      <if test="stage != null">
        stage = #{stage,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        type = #{type,jdbcType=VARCHAR},
      </if>
      <if test="source != null">
        source = #{source,jdbcType=VARCHAR},
      </if>
      <if test="activityId != null">
        activity_id = #{activityId,jdbcType=CHAR},
      </if>
      <if test="contactId != null">
        contact_id = #{contactId,jdbcType=CHAR},
      </if>
      <if test="createBy != null">
        create_by = #{createBy,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=CHAR},
      </if>
      <if test="editBy != null">
        edit_by = #{editBy,jdbcType=VARCHAR},
      </if>
      <if test="editTime != null">
        edit_time = #{editTime,jdbcType=CHAR},
      </if>
      <if test="description != null">
        description = #{description,jdbcType=VARCHAR},
      </if>
      <if test="contactummary != null">
        contact_summary = #{contactummary,jdbcType=VARCHAR},
      </if>
      <if test="nextContactTime != null">
        next_contact_time = #{nextContactTime,jdbcType=CHAR},
      </if>
    </set>
    where id = #{id,jdbcType=CHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.qsy.workbench.pojo.Transaction">
    update tbl_tran
    set owner = #{owner,jdbcType=CHAR},
      money = #{money,jdbcType=VARCHAR},
      name = #{name,jdbcType=VARCHAR},
      expected_date = #{expectedDate,jdbcType=CHAR},
      customer_id = #{customerId,jdbcType=CHAR},
      stage = #{stage,jdbcType=VARCHAR},
      type = #{type,jdbcType=VARCHAR},
      source = #{source,jdbcType=VARCHAR},
      activity_id = #{activityId,jdbcType=CHAR},
      contact_id = #{contactId,jdbcType=CHAR},
      create_by = #{createBy,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=CHAR},
      edit_by = #{editBy,jdbcType=VARCHAR},
      edit_time = #{editTime,jdbcType=CHAR},
      description = #{description,jdbcType=VARCHAR},
      contact_summary = #{contactummary,jdbcType=VARCHAR},
      next_contact_time = #{nextContactTime,jdbcType=CHAR}
    where id = #{id,jdbcType=CHAR}
  </update>

  <insert id="insertTransaction" parameterType="transaction">
    insert into tbl_tran (id, owner, money, name, expected_date, customer_id, stage, type, source, activity_id,contact_id, create_by, create_time, description, contact_summary,next_contact_time)
    values (#{id},#{ owner},#{ money},#{ name},#{ expectedDate},#{ customerId},#{ stage},#{ type},#{ source},#{ activityId},#{contactId},#{ createBy},#{ createTime},#{ description},#{ contactSummary},#{nextContactTime});
  </insert>

  <select id="selectTransactionByConditionForPage" parameterType="map" resultMap="BaseResultMap">
    select t.id, u1.name as owner, t.money, t.name, t.expected_date, cu.name as customer_id, dv1.value as stage, dv2.value as type, dv3.value as source, a.name as activity_id, co.fullname as contact_id, u2.name as create_by, t.create_time, u3.name as edit_by, t.edit_time, t.description, t.contact_summary, t.next_contact_time
    from tbl_tran t
    join tbl_user u1 on t.owner = u1.id
    join tbl_user u2 on t.create_by = u2.id
    left join tbl_user u3 on t.edit_by = u3.id
    left join tbl_activity a on t.activity_id = a.id
    join tbl_customer cu on t.customer_id = cu.id
    left join tbl_contact co on t.contact_id = co.id
    join tbl_dic_value dv1 on t.stage=dv1.id
    left join tbl_dic_value dv2 on t.type=dv2.id
    left join tbl_dic_value dv3 on t.source=dv3.id
    <where>
      <if test="owner!=null and owner!=''">
        and u1.name like '%' #{owner} '%'
      </if>
      <if test="name!=null and name!=''">
        and t.name like '%' #{name} '%'
      </if>
      <if test="customer!=null and customer!=''">
        and cu.name like '%' #{customer} '%'
      </if>
      <if test="stage!=null and stage!=''">
        and t.stage = #{stage}
      </if>
      <if test="type!=null and type!=''">
        and t.type = #{type}
      </if>
      <if test="source!=null and source!=''">
        and t.source = #{source}
      </if>
      <if test="contact!=null and contact!=''">
        and co.fullname like '%' #{contact} '%'
      </if>
    </where>
    order by t.create_time desc
    limit #{beginNo},#{pageSize}
  </select>

  <select id="selectCountOfTransactionByCondition" parameterType="map" resultType="_int">
    select count(*)
    from tbl_tran t
    join tbl_user u1 on t.owner = u1.id
    join tbl_user u2 on t.create_by = u2.id
    left join tbl_user u3 on t.edit_by = u3.id
    left join tbl_activity a on t.activity_id = a.id
    join tbl_customer cu on t.customer_id = cu.id
    left join tbl_contact co on t.contact_id = co.id
    join tbl_dic_value dv1 on t.stage=dv1.id
    left join tbl_dic_value dv2 on t.type=dv2.id
    left join tbl_dic_value dv3 on t.source=dv3.id
    <where>
      <if test="owner!=null and owner!=''">
        and u1.name like '%' #{owner} '%'
      </if>
      <if test="name!=null and name!=''">
        and t.name like '%' #{name} '%'
      </if>
      <if test="customer!=null and customer!=''">
        and cu.name like '%' #{customer} '%'
      </if>
      <if test="stage!=null and stage!=''">
        and t.stage = #{stage}
      </if>
      <if test="type!=null and type!=''">
        and t.type = #{type}
      </if>
      <if test="source!=null and source!=''">
        and t.source = #{source}
      </if>
      <if test="contact!=null and contact!=''">
        and co.fullname like '%' #{contact} '%'
      </if>
    </where>
  </select>

  <select id="selectTransactionForDetailById" parameterType="string" resultMap="BaseResultMap">
    select t.id, u1.name as owner, t.money, t.name, t.expected_date, cu.name as customer_id, dv1.value as stage, dv2.value as type, dv3.value as source, a.name as activity_id, co.fullname as contact_id, u2.name as create_by, t.create_time, u3.name as edit_by, t.edit_time, t.description, t.contact_summary, t.next_contact_time,dv1.order_no
    from tbl_tran t
     join tbl_user u1 on t.owner = u1.id
     join tbl_user u2 on t.create_by = u2.id
     left join tbl_user u3 on t.edit_by = u3.id
     left join tbl_activity a on t.activity_id = a.id
     join tbl_customer cu on t.customer_id = cu.id
     left join tbl_contact co on t.contact_id = co.id
     join tbl_dic_value dv1 on t.stage=dv1.id
     left join tbl_dic_value dv2 on t.type=dv2.id
     left join tbl_dic_value dv3 on t.source=dv3.id
    where t.id = #{id};
  </select>

  <select id="selectCountOfTranGroupByStage" resultType="funnelVO" parameterType="map">
    select count(*) as value, coalesce(dv.value,'未知') as name
    from tbl_tran t
    join tbl_dic_value dv on t.stage = dv.id
    <include refid="main_query"></include>
    group by stage;
  </select>
  
  <select id="selectTranById" parameterType="string" resultMap="BaseResultMap">
    select t.id,t.owner,t.money,t.name,t.expected_date,c.name as customer_id,t.stage,t.type,t.source,a.name as activity_name,t.activity_id,cot.fullname,t.contact_id,t.create_by,t.create_time,t.description,t.contact_summary,t.next_contact_time
    from tbl_tran t
    join tbl_customer c on t.customer_id = c.id
    left join tbl_activity a on t.activity_id = a.id
    left join tbl_contact cot on t.contact_id = cot.id
    where t.id = #{id}
  </select>
  
  <update id="updateTranById" parameterType="transaction" >
    update tbl_tran
    set owner = #{owner},
        money = #{money},
        name = #{name},
        expected_date = #{expectedDate},
        customer_id = #{customerId},
        stage = #{stage},
        type = #{type},
        source = #{source},
        activity_id = #{activityId},
        contact_id = #{contactId},
        edit_by = #{editBy},
        edit_time = #{editTime},
        description = #{description},
        contact_summary = #{contactSummary},
        next_contact_time = #{nextContactTime}
    where id = #{id};
  </update>
  <delete id="deleteTranByIds" parameterType="string">
    delete
    from tbl_tran
    where id in
      <foreach collection="array" item="id"
               open=" (" separator="," close=")" nullable="true">
        #{id}
      </foreach>
  </delete>
  <select id="selectTranByContactId" parameterType="string" resultMap="BaseResultMap">
    select t.id,t.name,t.money,dv1.value as stage,t.expected_date,dv2.value as type
    from tbl_tran t
    join tbl_dic_value dv1 on t.stage = dv1.id
    left join tbl_dic_value dv2 on t.type = dv2.id
    where t.contact_id = #{contactId};
  </select>
  <select id="selectTranByCustomerId" parameterType="string" resultMap="BaseResultMap">
    select t.id,t.name,t.money,dv1.value as stage,t.expected_date,dv2.value as type
    from tbl_tran t
           join tbl_dic_value dv1 on t.stage = dv1.id
           left join tbl_dic_value dv2 on t.type = dv2.id
    where t.customer_id = #{customerId};
  </select>
  <update id="updateTransactionByContactId" parameterType="string">
    update tbl_tran
    set contact_id = null
    where contact_id in
    <foreach collection="array" item="contactId" open=" (" close=")" separator=",">
      #{contactId}
    </foreach>
  </update>
  <update id="deleteTransactionByCustomerId" parameterType="string">
    delete
    from tbl_tran
    where customer_id in
    <foreach collection="array" item="customerId" open=" (" close=")" separator=",">
      #{customerId}
    </foreach>
  </update>
  <select id="selectCountOfTranAndSumMoneyGroupByCut" resultType="lBVO">
    SELECT a.money as value2,b.value as value,a.name as name
    FROM  (SELECT COUNT(*) AS VALUE,SUM(money) AS money ,c.name AS NAME
           FROM tbl_tran t
                  JOIN tbl_customer c ON t.customer_id =c.id
           WHERE stage='29805c804dd94974b568cfc9017b2e4c'
           GROUP BY t.customer_id) AS a,
          (SELECT COUNT(*) AS VALUE,c.name AS NAME
           FROM tbl_tran t
                  JOIN tbl_customer c ON t.customer_id =c.id
           WHERE t.customer_id IN ( SELECT customer_id FROM tbl_tran
                                    WHERE stage='29805c804dd94974b568cfc9017b2e4c')
           GROUP BY t.customer_id
          ) AS b
    WHERE a.name = b.name
    ORDER BY a.money
  </select>
  <select id="selectCountOfTranByCreateMonth" resultType="lBVO">
    SELECT DISTINCT a.name AS NAME,a.value AS VALUE,COALESCE(b.value,0) AS value2 FROM
      (SELECT MONTH(create_time) AS NAME ,COUNT(*) AS VALUE
       FROM tbl_tran
       WHERE YEAR(CURDATE())=YEAR(create_time)
       GROUP BY MONTH(create_time)) AS a LEFT JOIN (SELECT MONTH(create_time) AS NAME ,COUNT(*) AS VALUE
                                                    FROM tbl_tran
                                                    WHERE YEAR(CURDATE())=YEAR(create_time) AND stage = '29805c804dd94974b568cfc9017b2e4c'
                                                    GROUP BY MONTH(create_time)) AS b ON a.name=b.name
    ORDER BY a.name

  </select>
  <select id="selectSumMoneyGroupByOwner" resultType="lBVO">
    SELECT SUM(t.money) AS value,u.name AS name
    FROM tbl_tran t
           JOIN tbl_user u ON t.owner = u.id
    WHERE stage='29805c804dd94974b568cfc9017b2e4c'
    GROUP BY t.owner
    ORDER BY value;
  </select>

  <select id="selectCountOfTran" resultType="pieVO" parameterType="map">
    SELECT a.num,b.sum FROM
   (SELECT COUNT(*) AS num
    FROM tbl_tran
    WHERE  stage='29805c804dd94974b568cfc9017b2e4c'
    <if test="startDate!=null and startDate!=''">
      and create_time&gt;=#{startDate}
    </if>
    <if test="endDate!=null and endDate!=''">
      and create_time&lt;=#{endDate}
    </if>   )AS a,(SELECT COUNT(*) AS SUM
    FROM tbl_tran <include refid="main_query"></include>)AS b
  </select>
  <select id="selectCountOfNewTran" resultType="_int" parameterType="map">
    select count(*)
    from tbl_tran
    <include refid="main_query"></include>
  </select>
  <update id="updateTranByStage" parameterType="map">
    update tbl_tran
    set stage = #{stage}
    where id = #{id};
  </update>
  <sql id="main_query">
    <where>
      <if test="startDate!=null and startDate!=''">
        and create_time&gt;=#{startDate}
      </if>
      <if test="endDate!=null and endDate!=''">
        and create_time&lt;=#{endDate}
      </if>
    </where>
  </sql>
</mapper>